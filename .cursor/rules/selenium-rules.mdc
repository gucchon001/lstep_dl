---
description: Seleniumを使用したブラウザ自動化のルール
globs: **/*browser.py,**/*selenium*.py,**/webdriver*.py
alwaysApply: false
---

```markdown
# Seleniumを使用したブラウザ自動化のルール

## セレクタ管理
- セレクタは `config/selectors.csv` で一元管理する
- セレクタの変更はCSVファイルのみで行い、コード内にハードコーディングしない
- セレクタ情報には、グループ名、要素名、セレクタタイプ、セレクタ値、説明を含める
- セレクタが見つからない場合のフォールバック処理を実装する
- セレクタのロード処理を共通メソッドとして実装し、再利用する
- 必須のセレクタが見つからない場合は警告をログに記録する

## ブラウザ操作
- ブラウザ操作は `Browser` クラスのメソッドを使用する
- 直接 WebDriver のメソッドを呼び出すのではなく、ラッパーメソッドを使用する
- 新しいウィンドウへの切り替えは `switch_to_new_window` メソッドを使用する
- ページ読み込み完了の待機には `wait_for_page_load` メソッドを使用する
- 要素操作前に要素が表示されていることを確認する
- フォーム入力には `input_text` または `input_text_by_selector` メソッドを使用する

## 安定的な要素クリックのためのルール
- 要素クリック前に要素が表示され、クリック可能な状態であることを確認する
- 通常のクリックが失敗した場合、JavaScriptによるクリックを試みる
- 必要に応じて要素までスクロールしてから操作を行う
- 全ての操作前後でログを記録し、エラー時にはスクリーンショットを取得する
- クリック操作は以下の順序で試行する:
  1. 明示的な待機と状態確認
  2. 要素までのスクロール
  3. 通常のクリック操作
  4. JavaScriptによるクリック（フォールバック）
  5. エラー処理とリトライ

## エラーハンドリングとデコレータ
- 共通のエラーハンドリングには `handle_errors` デコレータを使用する
- デコレータ引数でスクリーンショット名と例外の再発生を制御する
- 全てのブラウザ操作メソッドにデコレータを適用して統一的なエラー処理を行う
- エラー発生時には詳細な情報をログに記録し、診断を容易にする
- メソッド名、実行引数、エラー内容をログに記録する
- 重要な操作の失敗時は例外を再発生させ、上位レベルでハンドリングする

## ページオブジェクトモデル（POM）
- 各ページの操作は専用のクラスとして実装する
- ページクラスは `Browser` クラスを内部で使用する
- ページクラスには初期化、要素操作、アクション実行の3種類のメソッドを実装する
- ページクラス間の共通機能は基底クラスで実装し継承を活用する
- POMクラスのメソッドは単一責任の原則に従い、一つの機能のみを実装する
- 複雑なフローは複数のメソッドに分割し、再利用性を高める

## 待機戦略
- 明示的な待機（WebDriverWait）を使用し、固定のsleep時間は最小限にする
- 要素が見つからない場合は適切なエラーメッセージをログに記録する
- タイムアウト値はコンストラクタで設定し、必要に応じてメソッド呼び出し時に上書きする
- 待機条件は目的に応じて適切なものを選択する
  - 表示確認: `visibility_of_element_located`
  - クリック可能確認: `element_to_be_clickable`
  - 存在確認: `presence_of_element_located`
  - URL変更確認: `url_changes`

## 設定管理
- 設定値は `EnvironmentUtils` クラスを使用して環境変数やINIファイルから取得する
- 設定値の型変換は明示的に行い、エラーを適切に処理する
- 設定値が存在しない場合のデフォルト値を指定する
- 設定変更は実行時の引数でも可能にする
- 型変換時のエラーハンドリングを実装する:
  ```python
  value = env.get_config_value("section", "key", "default")
  # 文字列の場合のみlower()メソッドを呼び出す
  if isinstance(value, str):
      value = value.lower()
  # 真偽値に変換
  is_enabled = value == "true" if isinstance(value, str) else bool(value)
  ```

## ブラウザインスタンスの共有
- 複数のページ操作で同じブラウザインスタンスを共有する
- ブラウザインスタンスの作成者がそのインスタンスの終了責任を持つ
- ブラウザインスタンスを受け取るコンストラクタパラメータを提供する
- ブラウザインスタンスの作成有無を追跡するフラグを実装する
- 終了処理時にはフラグを確認し、自身が作成したインスタンスのみを終了する

## スクリーンショット
- 重要な操作の前後でスクリーンショットを取得する
- スクリーンショットのファイル名は操作内容と状態を明確に示す（例: `login_before.png`, `login_after.png`）
- エラー発生時には必ずスクリーンショットを取得し、エラー状況を記録する
- スクリーンショットは日時ベースのディレクトリに保存し、実行ごとに整理する
- スクリーンショットには現在のURLや操作情報をファイル名に含める

## 実行モード
- 検証モードと本番モードを切り替え可能にする
- コマンドライン引数で動作を制御できるようにする
- ヘッドレスモードを設定ファイルと引数の両方から制御できるようにする
- 検証モードでは特定の操作をスキップし、環境を確認する機能を提供する

## リソース管理
- WebDriver は使用後に必ず `quit()` メソッドで終了する
- 長時間実行するテストでは、定期的にブラウザをリフレッシュしてメモリリークを防ぐ
- 複数のテストで同じブラウザインスタンスを共有する場合も、最終的には確実に終了する
- リソースリークを防ぐために、終了処理は try-finally ブロックで実装する

## デバッグ支援
- 複雑な操作の前後でHTMLソースを保存し、後で分析できるようにする
- 操作の各ステップを詳細にログに記録し、問題の特定を容易にする
- スクリーンショットと合わせてコンテキスト情報（URL、タイトル、クラス名など）も記録する
- ログレベルを設定で制御し、必要に応じて詳細なデバッグ情報を出力できるようにする

## ChromeDriverの管理
- ChromeDriverの自動ダウンロードには `webdriver_manager` パッケージを使用する
- `ChromeDriverManager().install()` を使用して最新のドライバーを自動的に取得する
- ドライバーのバージョンはChromeのバージョンと互換性があるものを自動選択する
- ドライバーのパスを環境変数やハードコードで指定せず、常に `webdriver_manager` を使用する
- Chrome以外のブラウザ対応も考慮した設計を行う

## セレクタCSVの構成
- `config/selectors.csv` ファイルは以下の列を含む:
  - `group`: セレクタのグループ名（例: `login`, `dashboard`）
  - `name`: セレクタの要素名（例: `username`, `login_button`）
  - `selector_type`: セレクタのタイプ（例: `css`, `xpath`, `id`）
  - `selector_value`: セレクタの値
  - `description`: セレクタの説明（日本語可）
- CSVの文字コードはUTF-8とし、BOMなしで保存する
- CSVの1行目はヘッダーとして扱う
```
